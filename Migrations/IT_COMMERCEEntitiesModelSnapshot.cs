// <auto-generated />
using System;
using ItCommerce.DTO.ModelDesign;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ASP.NETCoreWithEFCore.Migrations
{
    [DbContext(typeof(IT_COMMERCEEntities))]
    partial class IT_COMMERCEEntitiesModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.agence", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("id_entreprise")
                        .HasColumnType("integer");

                    b.Property<string>("localisation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("id_entreprise");

                    b.ToTable("agences");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.banque", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("adresse")
                        .HasColumnType("text");

                    b.Property<string>("contact")
                        .HasColumnType("text");

                    b.Property<int>("id_entreprise")
                        .HasColumnType("integer");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("id_entreprise");

                    b.ToTable("banques");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.categ_produit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("id_entreprise")
                        .HasColumnType("integer");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("id_entreprise");

                    b.ToTable("categ_produit");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.categ_vente", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("libelle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("categ_vente");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.client", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("adr_mail")
                        .HasColumnType("text");

                    b.Property<string>("contact")
                        .HasColumnType("text");

                    b.Property<DateTime>("date_creation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ifu")
                        .HasColumnType("text");

                    b.Property<string>("nom")
                        .HasColumnType("text");

                    b.Property<string>("prenom")
                        .HasColumnType("text");

                    b.Property<string>("raison_sociale")
                        .HasColumnType("text");

                    b.Property<int>("solde")
                        .HasColumnType("integer");

                    b.Property<string>("whatsapp")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.commande", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("date_cmde")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("id_entreprise")
                        .HasColumnType("integer");

                    b.Property<int?>("id_fournisseur")
                        .HasColumnType("integer");

                    b.Property<int>("id_profil")
                        .HasColumnType("integer");

                    b.Property<int?>("id_rayon")
                        .HasColumnType("integer");

                    b.Property<int>("montant_cmde")
                        .HasColumnType("integer");

                    b.Property<int>("montant_sorti")
                        .HasColumnType("integer");

                    b.Property<string>("reference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("statut")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("id_entreprise");

                    b.HasIndex("id_fournisseur");

                    b.HasIndex("id_profil");

                    b.HasIndex("id_rayon");

                    b.ToTable("commandes");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.commande_details", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("date_exp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("id_cmde")
                        .HasColumnType("integer");

                    b.Property<int>("id_produit_mesure")
                        .HasColumnType("integer");

                    b.Property<int>("p_achat")
                        .HasColumnType("integer");

                    b.Property<int?>("p_vente")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int>("qte_cmde")
                        .HasColumnType("integer");

                    b.Property<int?>("qte_recue")
                        .HasColumnType("integer");

                    b.Property<string>("reference")
                        .HasColumnType("text");

                    b.Property<string>("statut")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("id_cmde");

                    b.HasIndex("id_produit_mesure");

                    b.ToTable("commande_details");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.compte", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("id_banque")
                        .HasColumnType("integer");

                    b.Property<int>("id_entreprise")
                        .HasColumnType("integer");

                    b.Property<int?>("id_profil")
                        .HasColumnType("integer");

                    b.Property<int>("id_type_compte")
                        .HasColumnType("integer");

                    b.Property<string>("intitule")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("reference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("solde")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("id_banque");

                    b.HasIndex("id_entreprise");

                    b.HasIndex("id_profil");

                    b.HasIndex("id_type_compte");

                    b.ToTable("comptes");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.entreprise", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("adresse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("localisation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("logo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("raison_sociale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("secteur_activite")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("telephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("entreprises");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.facture", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool>("API")
                        .HasColumnType("boolean");

                    b.Property<string>("Code_Mecef")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Compteur_Total_Mecef")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Compteur_Type_Facture_Mecef")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Date_Mecef")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IFU")
                        .HasColumnType("text");

                    b.Property<string>("NIM_Mecef")
                        .HasColumnType("text");

                    b.Property<string>("QRCode_Mecef")
                        .HasColumnType("text");

                    b.Property<int>("id_vente")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("id_vente");

                    b.ToTable("factures");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.facture_avoir", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("Code_Mecef_Avoir")
                        .HasColumnType("text");

                    b.Property<string>("Compteur_Total_Mecef_Avoir")
                        .HasColumnType("text");

                    b.Property<string>("Compteur_Type_Facture_Mecef_Avoir")
                        .HasColumnType("text");

                    b.Property<string>("Date_Mecef_Avoir")
                        .HasColumnType("text");

                    b.Property<string>("IFU")
                        .HasColumnType("text");

                    b.Property<string>("NIM_Avoir")
                        .HasColumnType("text");

                    b.Property<string>("QRCode_Mecef_Avoir")
                        .HasColumnType("text");

                    b.Property<int>("id_facture")
                        .HasColumnType("integer");

                    b.Property<int>("id_vente")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("id_facture");

                    b.HasIndex("id_vente");

                    b.ToTable("factures_avoir");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.fournisseur", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("adresse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("id_entreprise")
                        .HasColumnType("integer");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("solde")
                        .HasColumnType("integer");

                    b.Property<string>("telephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("id_entreprise");

                    b.ToTable("fournisseurs");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.groupe", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("nb_roles")
                        .HasColumnType("integer");

                    b.Property<string>("nom")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("groupes");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.groupe_roles", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("id_groupe")
                        .HasColumnType("integer");

                    b.Property<int>("id_role")
                        .HasColumnType("integer");

                    b.Property<bool>("statut")
                        .HasColumnType("boolean");

                    b.HasKey("id");

                    b.HasIndex("id_groupe");

                    b.HasIndex("id_role");

                    b.ToTable("groupe_roles");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.licence", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("cle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("date_activation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("date_expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("est_active")
                        .HasColumnType("boolean");

                    b.Property<int>("id_entreprise")
                        .HasColumnType("integer");

                    b.Property<int>("montant_paye")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("id_entreprise");

                    b.ToTable("licences");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.log", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("actor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("categorie")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("date_log")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("desc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("id_entreprise")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("id_entreprise");

                    b.ToTable("logs");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.lot", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("date_creation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("date_expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("date_lot")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("reference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("lots");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.mouvement_compte", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("credit")
                        .HasColumnType("integer");

                    b.Property<DateTime>("date_mvt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("debit")
                        .HasColumnType("integer");

                    b.Property<int>("id_compte")
                        .HasColumnType("integer");

                    b.Property<int>("id_entreprise")
                        .HasColumnType("integer");

                    b.Property<int>("id_profil")
                        .HasColumnType("integer");

                    b.Property<string>("motif")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("numero_piece")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("solde")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("id_compte");

                    b.HasIndex("id_entreprise");

                    b.HasIndex("id_profil");

                    b.ToTable("mouvement_compte");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.objectif_vente", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("date_debut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("date_fin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("est_atteint")
                        .HasColumnType("boolean");

                    b.Property<int>("id_agence")
                        .HasColumnType("integer");

                    b.Property<int>("id_profil")
                        .HasColumnType("integer");

                    b.Property<int>("montant_atteint")
                        .HasColumnType("integer");

                    b.Property<int>("montant_objectif")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("id_agence");

                    b.HasIndex("id_profil");

                    b.ToTable("objectif_vente");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.param_mecef", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("valeur")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("param_mecef");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.produit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("code_fabricant")
                        .HasColumnType("text");

                    b.Property<string>("code_interne")
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int>("id_categ")
                        .HasColumnType("integer");

                    b.Property<int>("id_entreprise")
                        .HasColumnType("integer");

                    b.Property<string>("image")
                        .HasColumnType("text");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("id_categ");

                    b.HasIndex("id_entreprise");

                    b.ToTable("produits");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.produit_corresp_mesure", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("id_produit_mesure_enfant")
                        .HasColumnType("integer");

                    b.Property<int>("id_produit_mesure_parent")
                        .HasColumnType("integer");

                    b.Property<int?>("produitid")
                        .HasColumnType("integer");

                    b.Property<int>("quantite")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("id_produit_mesure_enfant");

                    b.HasIndex("id_produit_mesure_parent");

                    b.HasIndex("produitid");

                    b.ToTable("produit_corresp_mesure");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.produit_stock_limit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("id_produit")
                        .HasColumnType("integer");

                    b.Property<int>("id_produit_type_mesure")
                        .HasColumnType("integer");

                    b.Property<int>("quantite")
                        .HasColumnType("integer");

                    b.Property<string>("reference")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("id_produit");

                    b.HasIndex("id_produit_type_mesure");

                    b.ToTable("produit_stock_limit");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.produit_type_mesure", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("id_produit")
                        .HasColumnType("integer");

                    b.Property<int>("id_type_mesure")
                        .HasColumnType("integer");

                    b.Property<int>("quantite")
                        .HasColumnType("integer");

                    b.Property<string>("reference")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("id_produit");

                    b.HasIndex("id_type_mesure");

                    b.ToTable("produit_type_mesure");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.profil", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("date_creation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("id_agence")
                        .HasColumnType("integer");

                    b.Property<int>("id_groupe")
                        .HasColumnType("integer");

                    b.Property<int>("id_user")
                        .HasColumnType("integer");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("pwd")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("id_agence");

                    b.HasIndex("id_groupe");

                    b.HasIndex("id_user");

                    b.ToTable("profils");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.rayon", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("id_agence")
                        .HasColumnType("integer");

                    b.Property<bool?>("is_magasin")
                        .HasColumnType("boolean");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("id_agence");

                    b.ToTable("rayons");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("statut")
                        .HasColumnType("boolean");

                    b.HasKey("id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.service", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("cout")
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("id_entreprise")
                        .HasColumnType("integer");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("id_entreprise");

                    b.ToTable("services");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.stock", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("date_exp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("date_modif")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("id_produit_mesure")
                        .HasColumnType("integer");

                    b.Property<int>("id_rayon")
                        .HasColumnType("integer");

                    b.Property<int>("p_achat")
                        .HasColumnType("integer");

                    b.Property<int>("p_vente")
                        .HasColumnType("integer");

                    b.Property<int>("qte_reelle")
                        .HasColumnType("integer");

                    b.Property<int>("qte_vendable")
                        .HasColumnType("integer");

                    b.Property<string>("reference")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("id_produit_mesure");

                    b.HasIndex("id_rayon");

                    b.ToTable("stocks");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.stock_archives", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("date_modif")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("id_produit_mesure")
                        .HasColumnType("integer");

                    b.Property<int>("id_rayon")
                        .HasColumnType("integer");

                    b.Property<int>("p_achat")
                        .HasColumnType("integer");

                    b.Property<int>("p_vente")
                        .HasColumnType("integer");

                    b.Property<int>("quantite")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("id_produit_mesure");

                    b.HasIndex("id_rayon");

                    b.ToTable("stock_archives");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.transfert", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("date_transfert")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("id_destination")
                        .HasColumnType("integer");

                    b.Property<int>("id_profil")
                        .HasColumnType("integer");

                    b.Property<int>("id_source")
                        .HasColumnType("integer");

                    b.Property<string>("reference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("id_destination");

                    b.HasIndex("id_profil");

                    b.HasIndex("id_source");

                    b.ToTable("transferts");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.transfert_details", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("id_produit_mesure")
                        .HasColumnType("integer");

                    b.Property<int>("id_transfert")
                        .HasColumnType("integer");

                    b.Property<int>("p_achat")
                        .HasColumnType("integer");

                    b.Property<int>("p_vente")
                        .HasColumnType("integer");

                    b.Property<int>("quantite")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("id_produit_mesure");

                    b.HasIndex("id_transfert");

                    b.ToTable("transfert_details");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.type_compte", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("type_compte");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.type_mesure", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("id_entreprise")
                        .HasColumnType("integer");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("id_entreprise");

                    b.ToTable("type_mesure");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.utilisateur", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("adresse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("date_creation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("id_entreprise")
                        .HasColumnType("integer");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("prenoms")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("solde")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("telephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("id_entreprise");

                    b.ToTable("users");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.vente_produit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool?>("avec_facture")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("date_vente")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("id_agence")
                        .HasColumnType("integer");

                    b.Property<int?>("id_categ_vente")
                        .HasColumnType("integer");

                    b.Property<int?>("id_client")
                        .HasColumnType("integer");

                    b.Property<int>("id_profil")
                        .HasColumnType("integer");

                    b.Property<bool>("is_devis")
                        .HasColumnType("boolean");

                    b.Property<double>("mt_a_payer")
                        .HasColumnType("double precision");

                    b.Property<double>("mt_aib")
                        .HasColumnType("double precision");

                    b.Property<double>("mt_original")
                        .HasColumnType("double precision");

                    b.Property<double>("mt_recu")
                        .HasColumnType("double precision");

                    b.Property<double>("mt_remise")
                        .HasColumnType("double precision");

                    b.Property<double>("mt_tva")
                        .HasColumnType("double precision");

                    b.Property<string>("reference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("reliquat")
                        .HasColumnType("double precision");

                    b.Property<double>("reste_a_payer")
                        .HasColumnType("double precision");

                    b.Property<double>("t_aib")
                        .HasColumnType("double precision");

                    b.HasKey("id");

                    b.HasIndex("id_agence");

                    b.HasIndex("id_categ_vente");

                    b.HasIndex("id_client");

                    b.HasIndex("id_profil");

                    b.ToTable("vente_produit");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.vente_produit_details", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("id_produit_mesure")
                        .HasColumnType("integer");

                    b.Property<int>("id_rayon")
                        .HasColumnType("integer");

                    b.Property<int>("id_vente")
                        .HasColumnType("integer");

                    b.Property<string>("libellets")
                        .HasColumnType("text");

                    b.Property<double>("mt_remise")
                        .HasColumnType("double precision");

                    b.Property<double>("mt_tva")
                        .HasColumnType("double precision");

                    b.Property<int>("p_achat")
                        .HasColumnType("integer");

                    b.Property<int>("p_vente")
                        .HasColumnType("integer");

                    b.Property<int>("quantite")
                        .HasColumnType("integer");

                    b.Property<string>("tax")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ts")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("id_produit_mesure");

                    b.HasIndex("id_rayon");

                    b.HasIndex("id_vente");

                    b.ToTable("vente_produit_details");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.vente_service", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("date_vente")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("id_agence")
                        .HasColumnType("integer");

                    b.Property<int>("id_agent")
                        .HasColumnType("integer");

                    b.Property<int?>("id_categ_vente")
                        .HasColumnType("integer");

                    b.Property<int?>("id_client")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int>("montant_recu")
                        .HasColumnType("integer");

                    b.Property<int>("montant_vente")
                        .HasColumnType("integer");

                    b.Property<int?>("profilid")
                        .HasColumnType("integer");

                    b.Property<string>("reference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("reliquat")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("id_agence");

                    b.HasIndex("id_agent");

                    b.HasIndex("id_categ_vente");

                    b.HasIndex("id_client");

                    b.HasIndex("profilid");

                    b.ToTable("vente_service");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.vente_service_details", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("id_service")
                        .HasColumnType("integer");

                    b.Property<int>("id_vente")
                        .HasColumnType("integer");

                    b.Property<int>("montant")
                        .HasColumnType("integer");

                    b.Property<int>("prix")
                        .HasColumnType("integer");

                    b.Property<int>("quantite")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("id_service");

                    b.HasIndex("id_vente");

                    b.ToTable("vente_service_details");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.agence", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.entreprise", "entreprise")
                        .WithMany("agences")
                        .HasForeignKey("id_entreprise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("entreprise");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.banque", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.entreprise", "entreprise")
                        .WithMany("banques")
                        .HasForeignKey("id_entreprise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("entreprise");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.categ_produit", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.entreprise", "entreprise")
                        .WithMany("categ_produit")
                        .HasForeignKey("id_entreprise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("entreprise");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.commande", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.entreprise", "entreprise")
                        .WithMany("commandes")
                        .HasForeignKey("id_entreprise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.fournisseur", "fournisseur")
                        .WithMany("commandes")
                        .HasForeignKey("id_fournisseur");

                    b.HasOne("ItCommerce.DTO.ModelDesign.profil", "profil")
                        .WithMany("commandes")
                        .HasForeignKey("id_profil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.rayon", "rayon")
                        .WithMany("commandes")
                        .HasForeignKey("id_rayon");

                    b.Navigation("entreprise");

                    b.Navigation("fournisseur");

                    b.Navigation("profil");

                    b.Navigation("rayon");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.commande_details", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.commande", "commande")
                        .WithMany("commande_details")
                        .HasForeignKey("id_cmde")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.produit_type_mesure", "produit_type_mesure")
                        .WithMany("commande_details")
                        .HasForeignKey("id_produit_mesure")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("commande");

                    b.Navigation("produit_type_mesure");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.compte", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.banque", "banque")
                        .WithMany("comptes")
                        .HasForeignKey("id_banque");

                    b.HasOne("ItCommerce.DTO.ModelDesign.entreprise", "entreprise")
                        .WithMany("comptes")
                        .HasForeignKey("id_entreprise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.profil", "profil")
                        .WithMany("comptes")
                        .HasForeignKey("id_profil");

                    b.HasOne("ItCommerce.DTO.ModelDesign.type_compte", "type_compte")
                        .WithMany("comptes")
                        .HasForeignKey("id_type_compte")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("banque");

                    b.Navigation("entreprise");

                    b.Navigation("profil");

                    b.Navigation("type_compte");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.facture", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.vente_produit", "vente_produit")
                        .WithMany()
                        .HasForeignKey("id_vente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("vente_produit");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.facture_avoir", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.facture", "facture")
                        .WithMany()
                        .HasForeignKey("id_facture")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.vente_produit", "vente_produit")
                        .WithMany()
                        .HasForeignKey("id_vente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("facture");

                    b.Navigation("vente_produit");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.fournisseur", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.entreprise", "entreprise")
                        .WithMany("fournisseurs")
                        .HasForeignKey("id_entreprise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("entreprise");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.groupe_roles", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.groupe", "groupe")
                        .WithMany()
                        .HasForeignKey("id_groupe")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.role", "role")
                        .WithMany()
                        .HasForeignKey("id_role")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("groupe");

                    b.Navigation("role");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.licence", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.entreprise", "entreprise")
                        .WithMany("licences")
                        .HasForeignKey("id_entreprise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("entreprise");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.log", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.entreprise", "entreprise")
                        .WithMany("logs")
                        .HasForeignKey("id_entreprise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("entreprise");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.mouvement_compte", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.compte", "compte")
                        .WithMany("mouvement_compte")
                        .HasForeignKey("id_compte")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.entreprise", "entreprise")
                        .WithMany("mouvement_compte")
                        .HasForeignKey("id_entreprise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.profil", "profil")
                        .WithMany("mouvement_compte")
                        .HasForeignKey("id_profil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("compte");

                    b.Navigation("entreprise");

                    b.Navigation("profil");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.objectif_vente", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.agence", "agence")
                        .WithMany("objectif_vente")
                        .HasForeignKey("id_agence")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.profil", "profil")
                        .WithMany("objectif_vente")
                        .HasForeignKey("id_profil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("agence");

                    b.Navigation("profil");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.produit", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.categ_produit", "categ_produit")
                        .WithMany("produits")
                        .HasForeignKey("id_categ")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.entreprise", "entreprise")
                        .WithMany("produits")
                        .HasForeignKey("id_entreprise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("categ_produit");

                    b.Navigation("entreprise");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.produit_corresp_mesure", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.produit_type_mesure", "produit_type_mesure_enfant")
                        .WithMany("produit_corresp_mesure_enfants")
                        .HasForeignKey("id_produit_mesure_enfant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_prod_crp_mes_prod_type_mes_id_prod_mes_enfant");

                    b.HasOne("ItCommerce.DTO.ModelDesign.produit_type_mesure", "produit_type_mesure_parent")
                        .WithMany("produit_corresp_mesure_parents")
                        .HasForeignKey("id_produit_mesure_parent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_prod_crp_mes_prod_type_mes_id_prod_mes_parent");

                    b.HasOne("ItCommerce.DTO.ModelDesign.produit", null)
                        .WithMany("produit_corresp_mesure")
                        .HasForeignKey("produitid");

                    b.Navigation("produit_type_mesure_enfant");

                    b.Navigation("produit_type_mesure_parent");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.produit_stock_limit", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.produit", "produit")
                        .WithMany()
                        .HasForeignKey("id_produit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.produit_type_mesure", "produit_type_mesure")
                        .WithMany()
                        .HasForeignKey("id_produit_type_mesure")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("produit");

                    b.Navigation("produit_type_mesure");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.produit_type_mesure", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.produit", "produit")
                        .WithMany("produit_type_mesure")
                        .HasForeignKey("id_produit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.type_mesure", "type_mesure")
                        .WithMany("produit_type_mesure")
                        .HasForeignKey("id_type_mesure")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("produit");

                    b.Navigation("type_mesure");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.profil", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.agence", "agence")
                        .WithMany("profils")
                        .HasForeignKey("id_agence")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.groupe", "groupe")
                        .WithMany("profils")
                        .HasForeignKey("id_groupe")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.utilisateur", "user")
                        .WithMany("profils")
                        .HasForeignKey("id_user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("agence");

                    b.Navigation("groupe");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.rayon", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.agence", "agence")
                        .WithMany("rayons")
                        .HasForeignKey("id_agence")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("agence");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.service", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.entreprise", "entreprise")
                        .WithMany()
                        .HasForeignKey("id_entreprise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("entreprise");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.stock", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.produit_type_mesure", "produit_type_mesure")
                        .WithMany("stocks")
                        .HasForeignKey("id_produit_mesure")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.rayon", "rayon")
                        .WithMany("stocks")
                        .HasForeignKey("id_rayon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("produit_type_mesure");

                    b.Navigation("rayon");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.stock_archives", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.produit_type_mesure", "produit_type_mesure")
                        .WithMany("stock_archives")
                        .HasForeignKey("id_produit_mesure")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.rayon", "rayon")
                        .WithMany("stock_archives")
                        .HasForeignKey("id_rayon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("produit_type_mesure");

                    b.Navigation("rayon");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.transfert", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.rayon", "rayon_destination")
                        .WithMany()
                        .HasForeignKey("id_destination")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.profil", "profil")
                        .WithMany("transferts")
                        .HasForeignKey("id_profil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.rayon", "rayon_source")
                        .WithMany()
                        .HasForeignKey("id_source")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("profil");

                    b.Navigation("rayon_destination");

                    b.Navigation("rayon_source");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.transfert_details", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.produit_type_mesure", "produit_type_mesure")
                        .WithMany("transfert_details")
                        .HasForeignKey("id_produit_mesure")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.transfert", "transfert")
                        .WithMany("transfert_details")
                        .HasForeignKey("id_transfert")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("produit_type_mesure");

                    b.Navigation("transfert");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.type_mesure", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.entreprise", "entreprise")
                        .WithMany("type_mesure")
                        .HasForeignKey("id_entreprise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("entreprise");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.utilisateur", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.entreprise", "entreprise")
                        .WithMany("users")
                        .HasForeignKey("id_entreprise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("entreprise");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.vente_produit", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.agence", "agence")
                        .WithMany("ventes")
                        .HasForeignKey("id_agence")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.categ_vente", "categ_vente")
                        .WithMany("ventes")
                        .HasForeignKey("id_categ_vente");

                    b.HasOne("ItCommerce.DTO.ModelDesign.client", "client")
                        .WithMany()
                        .HasForeignKey("id_client");

                    b.HasOne("ItCommerce.DTO.ModelDesign.profil", "profil")
                        .WithMany()
                        .HasForeignKey("id_profil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("agence");

                    b.Navigation("categ_vente");

                    b.Navigation("client");

                    b.Navigation("profil");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.vente_produit_details", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.produit_type_mesure", "produit_type_mesure")
                        .WithMany("vente_details")
                        .HasForeignKey("id_produit_mesure")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.rayon", "rayon")
                        .WithMany("vente_details")
                        .HasForeignKey("id_rayon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.vente_produit", "vente")
                        .WithMany("vente_details")
                        .HasForeignKey("id_vente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("produit_type_mesure");

                    b.Navigation("rayon");

                    b.Navigation("vente");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.vente_service", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.agence", "agence")
                        .WithMany()
                        .HasForeignKey("id_agence");

                    b.HasOne("ItCommerce.DTO.ModelDesign.utilisateur", "utilisateur")
                        .WithMany("vente_service")
                        .HasForeignKey("id_agent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.categ_vente", "categ_vente")
                        .WithMany()
                        .HasForeignKey("id_categ_vente");

                    b.HasOne("ItCommerce.DTO.ModelDesign.client", "client")
                        .WithMany("vente_service")
                        .HasForeignKey("id_client")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.profil", "profil")
                        .WithMany("vente_service")
                        .HasForeignKey("profilid");

                    b.Navigation("agence");

                    b.Navigation("categ_vente");

                    b.Navigation("client");

                    b.Navigation("profil");

                    b.Navigation("utilisateur");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.vente_service_details", b =>
                {
                    b.HasOne("ItCommerce.DTO.ModelDesign.service", "service")
                        .WithMany()
                        .HasForeignKey("id_service")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItCommerce.DTO.ModelDesign.vente_service", "vente")
                        .WithMany("vente_details")
                        .HasForeignKey("id_vente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("service");

                    b.Navigation("vente");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.agence", b =>
                {
                    b.Navigation("objectif_vente");

                    b.Navigation("profils");

                    b.Navigation("rayons");

                    b.Navigation("ventes");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.banque", b =>
                {
                    b.Navigation("comptes");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.categ_produit", b =>
                {
                    b.Navigation("produits");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.categ_vente", b =>
                {
                    b.Navigation("ventes");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.client", b =>
                {
                    b.Navigation("vente_service");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.commande", b =>
                {
                    b.Navigation("commande_details");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.compte", b =>
                {
                    b.Navigation("mouvement_compte");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.entreprise", b =>
                {
                    b.Navigation("agences");

                    b.Navigation("banques");

                    b.Navigation("categ_produit");

                    b.Navigation("commandes");

                    b.Navigation("comptes");

                    b.Navigation("fournisseurs");

                    b.Navigation("licences");

                    b.Navigation("logs");

                    b.Navigation("mouvement_compte");

                    b.Navigation("produits");

                    b.Navigation("type_mesure");

                    b.Navigation("users");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.fournisseur", b =>
                {
                    b.Navigation("commandes");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.groupe", b =>
                {
                    b.Navigation("profils");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.produit", b =>
                {
                    b.Navigation("produit_corresp_mesure");

                    b.Navigation("produit_type_mesure");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.produit_type_mesure", b =>
                {
                    b.Navigation("commande_details");

                    b.Navigation("produit_corresp_mesure_enfants");

                    b.Navigation("produit_corresp_mesure_parents");

                    b.Navigation("stock_archives");

                    b.Navigation("stocks");

                    b.Navigation("transfert_details");

                    b.Navigation("vente_details");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.profil", b =>
                {
                    b.Navigation("commandes");

                    b.Navigation("comptes");

                    b.Navigation("mouvement_compte");

                    b.Navigation("objectif_vente");

                    b.Navigation("transferts");

                    b.Navigation("vente_service");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.rayon", b =>
                {
                    b.Navigation("commandes");

                    b.Navigation("stock_archives");

                    b.Navigation("stocks");

                    b.Navigation("vente_details");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.transfert", b =>
                {
                    b.Navigation("transfert_details");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.type_compte", b =>
                {
                    b.Navigation("comptes");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.type_mesure", b =>
                {
                    b.Navigation("produit_type_mesure");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.utilisateur", b =>
                {
                    b.Navigation("profils");

                    b.Navigation("vente_service");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.vente_produit", b =>
                {
                    b.Navigation("vente_details");
                });

            modelBuilder.Entity("ItCommerce.DTO.ModelDesign.vente_service", b =>
                {
                    b.Navigation("vente_details");
                });
#pragma warning restore 612, 618
        }
    }
}
